(defclass test-lisp-math-expressions-language (test-base-model)
  ((grammar :initarg :grammar :accessor grammar)))


(defmethod initialize-instance :after ((o test-lisp-math-expressions-language) &rest args)
  (setf (grammar o) (grammar (system-get 'lisp-math-function-xyz))))

(defmethod good-formed-lisp-math-functions-cases ((o test-lisp-math-expressions-language))
  '(1
    (cos x)
    (+ 1 2)
    (- x 2)
    (+ 1 (* 2 (* x x)))
    (+ (* (- x y) 3) 0.5)
    (+ 0.5 (* (- x y) 3))
    (cos (sin (tan x)))
    (+ (* 3 (* x x)) (* 0.5 (* x (sin x))))))

(defmethod badly-formed-lisp-math-functions-cases ((o test-lisp-math-expressions-language))
  '((2)
    (1 1)
    (3 4 3)
    (+ 2 2 2)
    (sin 1 2)
    (sin (+ 1 x) 3)))

(defmethod test-parse-lisp-math-functions-ok ((o test-lisp-math-expressions-language))
  (dolist (expression (good-formed-lisp-math-functions-cases o))
    (multiple-value-bind (result error)
        (parse (grammar o) expression)
      (check (null error))
      (check (equal (deparse result) expression)))))
        
(defmethod test-parse-lisp-math-functions-errors ((o test-lisp-math-expressions-language))
  (dolist (expression (badly-formed-lisp-math-functions-cases o))
    (multiple-value-bind (result error)
        (parse (grammar o) expression)
      (declare (ignore result))
      (check error))))

(defmethod test-directed-crossover-cfg ((o test-lisp-math-expressions-language))
  (let ((operator (system-get 'crossover-cfg))
        (language (copy (system-get 'lisp-math-function-xy)))
        (a '(cos (sin (tan x))))
        (b '(+ (* (sin x) (* y y)) (* 4 (* x x))))
        (c 1)
        (d 2))
    (setf (max-size language) 12)
    (dotimes (i 100)
      (check (>= (max-size language) 
                 (tree-size (directed-crossover-cfg a b language operator))))
      (check (>= (max-size language) 
                 (tree-size (directed-crossover-cfg c d language operator))))
      (check (>= (max-size language) 
                 (tree-size (directed-crossover-cfg a d language operator))))
      (check (>= (max-size language) 
                 (tree-size (directed-crossover-cfg d a language operator)))))))

