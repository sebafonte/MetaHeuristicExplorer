

(defclass test-entity-evaluator-x-cl (test-base-model) 
  ())

(defmethod opencl-test-algorithm ((o test-entity-evaluator-x-cl))
  (PROGN (SETF G48522 (MAKE-INSTANCE (QUOTE GENOTYPE))) (SETF G48540 (MAKE-INSTANCE (QUOTE N-RUNS-TASK-BUILDER))) (SETF G48533 (MAKE-INSTANCE (QUOTE CFG-MUTATION))) (SETF G48531 (MAKE-INSTANCE (QUOTE POINT-MUTATION))) (SETF G48525 (MAKE-INSTANCE (QUOTE SUBTREE-CROSSOVER))) (SETF G48546 (MAKE-INSTANCE (QUOTE GENERATIONAL-STAGE-OPTIMIZATION-STRATEGY))) (SETF G48526 (MAKE-INSTANCE (QUOTE SUBTREE-CROSSOVER))) (SETF G48523 (MAKE-INSTANCE (QUOTE ENTITY-FUNCTION-X-EVALUATOR))) (SETF G48528 (MAKE-INSTANCE (QUOTE BRANCH-DELETE))) (SETF G48527 (MAKE-INSTANCE (QUOTE SUBTREE-CROSSOVER))) (SETF G48517 (MAKE-INSTANCE (QUOTE GENERATIONAL-ALGORITHM))) (SETF G48551 (MAKE-INSTANCE (QUOTE GENOTYPE))) (SETF G48524 (MAKE-INSTANCE (QUOTE CFG-TREE-LANGUAGE))) (SETF G48537 (MAKE-INSTANCE (QUOTE FIXED-SET-CONSTANTS-FACTORY))) (SETF G48536 (MAKE-INSTANCE (QUOTE CFG-MUTATION))) (SETF G48547 (MAKE-INSTANCE (QUOTE BEST-OF-POPULATION-OPTIMIZATION-TARGET))) (SETF G48548 (MAKE-INSTANCE (QUOTE STEEPEST-DESCENT-OPTIMIZATION))) (SETF G48535 (MAKE-INSTANCE (QUOTE CFG-MUTATION))) (SETF G48549 (MAKE-INSTANCE (QUOTE ELITE-MANAGER))) (SETF G48532 (MAKE-INSTANCE (QUOTE MUTATION))) (SETF G48542 (MAKE-INSTANCE (QUOTE TOURNAMENT-SELECTION))) (SETF G48541 (MAKE-INSTANCE (QUOTE RUNNING-IMAGE-PLANIFIER))) (SETF G48529 (MAKE-INSTANCE (QUOTE SUBTREE-CROSSOVER))) (SETF G48538 (MAKE-INSTANCE (QUOTE CONTEXT-FREE-GRAMMAR) :NAME (QUOTE SERIALIZED-VALID-GRAMMAR) :LEXER (QUOTE LISP-MATH-EXPRESSION-TOKEN-TYPE-LEXER) :PARSER-INITIALIZER (QUOTE INITIALIZE-LISP-MATH-EXPRESSION-PARSER))) (SETF G48530 (MAKE-INSTANCE (QUOTE MUTATION))) (SETF G48534 (MAKE-INSTANCE (QUOTE CFG-MUTATION))) (SETF G48519 (MAKE-INSTANCE (QUOTE GENOTYPE))) (SETF G48520 (MAKE-INSTANCE (QUOTE SEARCH-TASK))) (SETF G48550 (MAKE-INSTANCE (QUOTE ENTITY-FUNCTION-X))) (SETF G48544 (MAKE-INSTANCE (QUOTE RANDOM-TREES-GENERATOR))) (PROGN (SETF (PROPERTIES-VALUES G48517) (LET ((G48518 (MAKE-HASH-TABLE))) (SET-HASH G48518 (QUOTE local-optimization) NIL (QUOTE INITIALIZATION-METHOD) NIL (QUOTE CONTEXT) NIL (QUOTE MAX-ITERATIONS) NIL (QUOTE MAX-GENERATIONS) NIL (QUOTE ELITE-MANAGER) NIL (QUOTE MIN-COPIES) NIL (QUOTE POPULATION-SIZE) NIL (QUOTE POPULATION) NIL (QUOTE GENERATION) NIL (QUOTE ITERATION) NIL (QUOTE MAX-UNIQUE-ITERATIONS) NIL (QUOTE NAME) NIL (QUOTE SELECTION-METHOD) NIL (QUOTE MAX-COPIES) NIL) G48518) (NAME G48517) (QUOTE SEARCH-ALGORITHM) (MAX-ITERATIONS G48517) 10000 (ITERATION G48517) 0 (CONTEXT G48517) (PROGN (SETF (PROPERTIES-VALUES G48520) (LET ((G48521 (MAKE-HASH-TABLE))) (SET-HASH G48521 (QUOTE DESCRIPTION) NIL (QUOTE CHILDREN) NIL (QUOTE BEST-FITNESS) NIL (QUOTE FINAL-TIME) NIL (QUOTE objective-CLASS) NIL (QUOTE ALGORITHM) NIL (QUOTE MEDIUM-SIZE) NIL (QUOTE RUNNING-TIME) NIL (QUOTE RESULT) NIL (QUOTE TASK-BUILDER) NIL (QUOTE LOG-DATA) NIL (QUOTE STATE) NIL (QUOTE MEDIUM-FITNESS) NIL (QUOTE RANDOM-SEED) NIL (QUOTE INITIAL-TIME) NIL (QUOTE SEED) NIL (QUOTE TASK-PLANIFIER) NIL (QUOTE NAME) NIL (QUOTE BEST-SIZE) NIL (QUOTE PROGRESS-INDICATOR) NIL (QUOTE PRIORITY) NIL) G48521) (GEN G48520) (PROGN (SETF (EXPRESION G48522) NIL (FITNESS G48522) 0) G48522) (FITNESS G48520) 0 (FITNESS-ADJUSTED G48520) (INTERNKEY "FITNESS-ADJUSTED") (FITNESS-NORMALIZED G48520) (INTERNKEY "FITNESS-NORMALIZED") (NAME G48520) (QUOTE NEW) (DESCRIPTION G48520) (QUOTE NEW) (STATE G48520) (QUOTE FINISHED) (CHILDREN G48520) NIL (INPUT G48520) NIL (RESULT G48520) NIL (PRIORITY G48520) -50000 (RANDOM-SEED G48520) T (INITIAL-TIME G48520) 3597464673 (FINAL-TIME G48520) 3597464673 (SEED G48520) 757362 (objective-CLASS G48520) (QUOTE ENTITY-FUNCTION-X) (FITNESS-EVALUATOR G48520) (PROGN (SETF (PROPERTIES-VALUES G48523) (MAKE-HASH-TABLE) (NAME G48523) (QUOTE MEDIUM-0-10-FUNCTION-X-EVALUATOR) (DESCRIPTION G48523) "Medium 0-10" (SOLUTION-FITNESS G48523) 9.98 (MIN-FITNESS G48523) 0 (MAX-FITNESS G48523) 10 (FITNESS-VECTOR G48523) (MAKE-ARRAY (LIST 32) :INITIAL-CONTENTS (LIST (LIST 0 1) (LIST 5/16 21/16) (LIST 5/8 13/8) (LIST 15/16 31/16) (LIST 5/4 9/4) (LIST 25/16 41/16) (LIST 15/8 23/8) (LIST 35/16 51/16) (LIST 5/2 7/2) (LIST 45/16 61/16) (LIST 25/8 33/8) (LIST 55/16 71/16) (LIST 15/4 19/4) (LIST 65/16 81/16) (LIST 35/8 43/8) (LIST 75/16 91/16) (LIST 5 6) (LIST 85/16 101/16) (LIST 45/8 53/8) (LIST 95/16 111/16) (LIST 25/4 29/4) (LIST 105/16 121/16) (LIST 55/8 63/8) (LIST 115/16 131/16) (LIST 15/2 17/2) (LIST 125/16 141/16) (LIST 65/8 73/8) (LIST 135/16 151/16) (LIST 35/4 39/4) (LIST 145/16 161/16) (LIST 75/8 83/8) (LIST 155/16 171/16))) (FITNESS-FUNCTION G48523) (QUOTE EVALUATE-DISTANCE) (TARGET-PROGRAM G48523) (LIST (QUOTE +) 1 (QUOTE X)) (SAMPLES G48523) 32 (MEASURE-START G48523) 0 (MEASURE-END G48523) 10) G48523) (LANGUAGE G48520) (PROGN (SETF (PROPERTIES-VALUES G48524) (MAKE-HASH-TABLE) (NAME G48524) (QUOTE LISP-MATH-FUNCTION-X) (DESCRIPTION G48524) "Description" (SIMPLIFICATION-FUNCTION G48524) (QUOTE SIMPLIFY-STRATEGY) (SIMPLIFICATION-PATTERNS G48524) (LIST (LIST (LIST (QUOTE +) (QUOTE ?EXP) 0) (QUOTE ?1)) (LIST (LIST (QUOTE +) (QUOTE ?EXP) 0.0) (QUOTE ?1)) (LIST (LIST (QUOTE +) 0 (QUOTE ?EXP)) (QUOTE ?2)) (LIST (LIST (QUOTE +) 0.0 (QUOTE ?EXP)) (QUOTE ?2)) (LIST (LIST (QUOTE -) (QUOTE ?EXP) 0) (QUOTE ?1)) (LIST (LIST (QUOTE -) (QUOTE ?EXP) 0.0) (QUOTE ?1)) (LIST (LIST (QUOTE -) (QUOTE ?EXP) (QUOTE ?EXP)) 0) (LIST (LIST (QUOTE *) (QUOTE ?EXP) 0) 0) (LIST (LIST (QUOTE *) (QUOTE ?EXP) 0.0) 0) (LIST (LIST (QUOTE *) 0 (QUOTE ?EXP)) 0) (LIST (LIST (QUOTE *) 0.0 (QUOTE ?EXP)) 0) (LIST (LIST (QUOTE *) (QUOTE ?EXP) 1) (QUOTE ?1)) (LIST (LIST (QUOTE *) (QUOTE ?EXP) 1.0) (QUOTE ?1)) (LIST (LIST (QUOTE *) 1 (QUOTE ?EXP)) (QUOTE ?2)) (LIST (LIST (QUOTE *) 1.0 (QUOTE ?EXP)) (QUOTE ?2)) (LIST (LIST (QUOTE /-) (QUOTE ?EXP) 1) (QUOTE ?1)) (LIST (LIST (QUOTE /-) (QUOTE ?EXP) 1.0) (QUOTE ?1)) (LIST (LIST (QUOTE /-) 0 (QUOTE ?EXP)) 0) (LIST (LIST (QUOTE /-) 0.0 (QUOTE ?EXP)) 0) (LIST (LIST (QUOTE /-) (QUOTE ?EXP) 0) (QUOTE ?1)) (LIST (LIST (QUOTE /-) (QUOTE ?EXP) 0.0) (QUOTE ?1)) (LIST (LIST (QUOTE /-) (QUOTE ?EXP) (QUOTE ?EXP)) 1)) (VALID-NEW-EXPRESION-FUNCTION G48524) (QUOTE CREATE-NEW-RANDOM-VALID) (OPERATORS G48524) (LIST (LIST (PROGN (SETF (PROPERTIES-VALUES G48525) (MAKE-HASH-TABLE) (NAME G48525) (QUOTE CROSSOVER) (VALUE-FUNCTION G48525) (QUOTE CROSSOVER) (SOURCE-SELECTION-FUNCTION G48525) NIL (TARGET-SELECTION-FUNCTION G48525) NIL (MIN-SUBTREE-DEPTH G48525) 1) G48525) 0.0) (LIST (PROGN (SETF (PROPERTIES-VALUES G48526) (MAKE-HASH-TABLE) (NAME G48526) (QUOTE CROSSOVER-KOZA) (VALUE-FUNCTION G48526) (QUOTE CROSSOVER-KOZA) (SOURCE-SELECTION-FUNCTION G48526) NIL (TARGET-SELECTION-FUNCTION G48526) NIL (MIN-SUBTREE-DEPTH G48526) 2) G48526) 0.3) (LIST (PROGN (SETF (PROPERTIES-VALUES G48527) (MAKE-HASH-TABLE) (NAME G48527) (QUOTE CROSSOVER-CFG) (VALUE-FUNCTION G48527) (QUOTE CROSSOVER-CFG) (SOURCE-SELECTION-FUNCTION G48527) (QUOTE CROSSOVER-CFG-SOURCE-SELECTION) (TARGET-SELECTION-FUNCTION G48527) (QUOTE CROSSOVER-CFG-TARGET-SELECTION-WEIGHT-DEPTH) (MIN-SUBTREE-DEPTH G48527) NIL) G48527) 0.2) (LIST (PROGN (SETF (PROPERTIES-VALUES G48528) (MAKE-HASH-TABLE) (NAME G48528) (QUOTE BRANCH-DELETE) (NODE-SELECTION-FUNCTION G48528) 1) G48528) 0.2) (LIST (PROGN (SETF (PROPERTIES-VALUES G48529) (MAKE-HASH-TABLE) (NAME G48529) (QUOTE BRANCH-DELETE-CFG) (VALUE-FUNCTION G48529) (QUOTE MUTATE-BRANCH-DELETE-CFG) (SOURCE-SELECTION-FUNCTION G48529) (QUOTE BRANCH-DELETE-CFG-SOURCE-SELECTION) (TARGET-SELECTION-FUNCTION G48529) NIL (MIN-SUBTREE-DEPTH G48529) NIL) G48529) 0.0) (LIST (PROGN (SETF (PROPERTIES-VALUES G48530) (MAKE-HASH-TABLE) (NAME G48530) (QUOTE MUTATE) (SOURCE-SELECTION-FUNCTION G48530) (QUOTE LAMBDA-MUTATE-SELECTION-FUNCTION) (TREE-CREATION-FUNCTION G48530) 1 (VALUE-FUNCTION G48530) (QUOTE MUTATE)) G48530) 0.0) (LIST (PROGN (SETF (PROPERTIES-VALUES G48531) (MAKE-HASH-TABLE) (NAME G48531) (QUOTE MUTATE-POINT) (SOURCE-SELECTION-FUNCTION G48531) (QUOTE LAMBDA-POINT-MUTATION-SELECTION-FUNCTION) (VALUE-FUNCTION G48531) (QUOTE MUTATE-POINT)) G48531) 0.2) (LIST (PROGN (SETF (PROPERTIES-VALUES G48532) (MAKE-HASH-TABLE) (NAME G48532) (QUOTE MUTATE-KOZA) (SOURCE-SELECTION-FUNCTION G48532) 1 (TREE-CREATION-FUNCTION G48532) 1 (VALUE-FUNCTION G48532) (QUOTE MUTATE-KOZA)) G48532) 0.0) (LIST (PROGN (SETF (PROPERTIES-VALUES G48533) (MAKE-HASH-TABLE) (NAME G48533) (QUOTE MUTATE-CFG) (VALUE-FUNCTION G48533) (QUOTE MUTATE-CFG) (SOURCE-SELECTION-FUNCTION G48533) (QUOTE CROSSOVER-CFG-SOURCE-SELECTION) (TARGET-SELECTION-FUNCTION G48533) (QUOTE CROSSOVER-CFG-TARGET-SELECTION-WEIGHT-DEPTH) (MIN-SUBTREE-DEPTH G48533) NIL (PRODUCTION-SELECTION-WEIGHT-FUNCTION G48533) (QUOTE LAMBDA-WEIGHT-HEURISTIC-1-RANDOM-SELECTION-LIST)) G48533) 0.1) (LIST (PROGN (SETF (PROPERTIES-VALUES G48534) (MAKE-HASH-TABLE) (NAME G48534) (QUOTE MUTATE-REUSE-CFG) (VALUE-FUNCTION G48534) (QUOTE MUTATE-REUSE-CFG) (SOURCE-SELECTION-FUNCTION G48534) (QUOTE MUTATE-PRODUCTION-CFG-SOURCE-SELECTION) (TARGET-SELECTION-FUNCTION G48534) NIL (MIN-SUBTREE-DEPTH G48534) NIL (PRODUCTION-SELECTION-WEIGHT-FUNCTION G48534) (QUOTE LAMBDA-WEIGHT-EQUAL-RANDOM-SELECTION-LIST)) G48534) 0.0) (LIST (PROGN (SETF (PROPERTIES-VALUES G48535) (MAKE-HASH-TABLE) (NAME G48535) (QUOTE MUTATE-PRODUCTION-CFG) (VALUE-FUNCTION G48535) (QUOTE MUTATE-PRODUCTION-CFG) (SOURCE-SELECTION-FUNCTION G48535) (QUOTE MUTATE-PRODUCTION-CFG-SOURCE-SELECTION) (TARGET-SELECTION-FUNCTION G48535) NIL (MIN-SUBTREE-DEPTH G48535) NIL (PRODUCTION-SELECTION-WEIGHT-FUNCTION G48535) (QUOTE LAMBDA-WEIGHT-EQUAL-RANDOM-SELECTION-LIST)) G48535) 0.0) (LIST (PROGN (SETF (PROPERTIES-VALUES G48536) (MAKE-HASH-TABLE) (NAME G48536) (QUOTE RANDOM-CREATE-CFG) (VALUE-FUNCTION G48536) (QUOTE RANDOM-CREATE-CFG) (SOURCE-SELECTION-FUNCTION G48536) NIL (TARGET-SELECTION-FUNCTION G48536) NIL (MIN-SUBTREE-DEPTH G48536) NIL (PRODUCTION-SELECTION-WEIGHT-FUNCTION G48536) (QUOTE LAMBDA-WEIGHT-EQUAL-RANDOM-SELECTION-LIST)) G48536) 0.0)) (MAX-SIZE G48524) 18 (MAX-DEPTH G48524) 8 (MAX-DEPTH-NEW-INDIVIDUALS G48524) 4 (MAX-SIZE-NEW-INDIVIDUALS G48524) 10 (CONSTANTS-STRATEGY G48524) (PROGN (SETF (PROPERTIES-VALUES G48537) (MAKE-HASH-TABLE) (NAME G48537) (QUOTE DEFAULT-FIXED-SET-NUMERICAL-1) (DISTRIBUTION G48537) NIL (CONSTANTS-SET G48537) (LIST 0 1 2 3 4 5 6 7 8 9 10)) G48537) (FUNCTIONS G48524) (LIST (LIST (QUOTE +) 2) (LIST (QUOTE -) 2) (LIST (QUOTE *) 2) (LIST (QUOTE /-) 2) (LIST (QUOTE SIN) 1) (LIST (QUOTE COS) 1) (LIST (QUOTE SQR) 1) (LIST (QUOTE ABS) 1)) (VARIABLES G48524) (LIST (QUOTE X)) (TERMINALS G48524) (LIST (QUOTE X) (INTERNKEY "CONSTANT")) (TOKENS G48524) (LIST (LIST (QUOTE ABS) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE SIN) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE COS) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE TAN) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE SQR) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE EXP) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE LOG) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE REAL-SQRT) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE +) (INTERNKEY "2-ARY-OPERATOR")) (LIST (QUOTE -) (INTERNKEY "2-ARY-OPERATOR")) (LIST (QUOTE *) (INTERNKEY "2-ARY-OPERATOR")) (LIST (QUOTE /) (INTERNKEY "2-ARY-OPERATOR")) (LIST (QUOTE /-) (INTERNKEY "2-ARY-OPERATOR")) (LIST (QUOTE REAL-EXPT) (INTERNKEY "2-ARY-OPERATOR")) (LIST (QUOTE REAL-IF) (INTERNKEY "3-ARY-OPERATOR"))) (GRAMMAR G48524) (PROGN (SETF (NAME G48538) (QUOTE LISP-MATH-FUNCTION-GRAMMAR-X) (PRODUCTIONS G48538) (LIST (LIST (QUOTE START) (QUOTE EXPRESION)) (LIST (QUOTE EXPRESION) (INTERNKEY "OPEN") (QUOTE 1-ARY-OPERATOR) (QUOTE EXPRESION) (INTERNKEY "CLOSE")) (LIST (QUOTE EXPRESION) (INTERNKEY "OPEN") (QUOTE 2-ARY-OPERATOR) (QUOTE EXPRESION) (QUOTE EXPRESION) (INTERNKEY "CLOSE")) (LIST (QUOTE EXPRESION) (INTERNKEY "OPEN") (QUOTE 3-ARY-OPERATOR) (QUOTE EXPRESION) (QUOTE EXPRESION) (QUOTE EXPRESION) (INTERNKEY "CLOSE")) (LIST (QUOTE EXPRESION) (QUOTE CONSTANT)) (LIST (QUOTE EXPRESION) (QUOTE VAR)) (LIST (QUOTE CONSTANT) (INTERNKEY "CONSTANT")) (LIST (QUOTE VAR) (INTERNKEY "VAR"))) (UPDATED-PRODUCTIONS G48538) (LIST (LIST (QUOTE START) (QUOTE EXPRESION)) (LIST (QUOTE EXPRESION) (INTERNKEY "OPEN") (QUOTE 1-ARY-OPERATOR) (QUOTE EXPRESION) (INTERNKEY "CLOSE")) (LIST (QUOTE EXPRESION) (INTERNKEY "OPEN") (QUOTE 2-ARY-OPERATOR) (QUOTE EXPRESION) (QUOTE EXPRESION) (INTERNKEY "CLOSE")) (LIST (QUOTE EXPRESION) (INTERNKEY "OPEN") (QUOTE 3-ARY-OPERATOR) (QUOTE EXPRESION) (QUOTE EXPRESION) (QUOTE EXPRESION) (INTERNKEY "CLOSE")) (LIST (QUOTE EXPRESION) (QUOTE CONSTANT)) (LIST (QUOTE EXPRESION) (QUOTE VAR)) (LIST (QUOTE CONSTANT) (INTERNKEY "CONSTANT")) (LIST (QUOTE VAR) (INTERNKEY "VAR")) (LIST (QUOTE 1-ARY-OPERATOR) (QUOTE ABS)) (LIST (QUOTE ABS) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE 1-ARY-OPERATOR) (QUOTE SIN)) (LIST (QUOTE SIN) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE 1-ARY-OPERATOR) (QUOTE COS)) (LIST (QUOTE COS) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE 1-ARY-OPERATOR) (QUOTE SQR)) (LIST (QUOTE SQR) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE 2-ARY-OPERATOR) (QUOTE +)) (LIST (QUOTE +) (INTERNKEY "2-ARY-OPERATOR")) (LIST (QUOTE 2-ARY-OPERATOR) (QUOTE -)) (LIST (QUOTE -) (INTERNKEY "2-ARY-OPERATOR")) (LIST (QUOTE 2-ARY-OPERATOR) (QUOTE *)) (LIST (QUOTE *) (INTERNKEY "2-ARY-OPERATOR")) (LIST (QUOTE 2-ARY-OPERATOR) (QUOTE /-)) (LIST (QUOTE /-) (INTERNKEY "2-ARY-OPERATOR")) (LIST (QUOTE 3-ARY-OPERATOR) (QUOTE 3-ARY-OPERATOR)) (LIST (QUOTE 3-ARY-OPERATOR) (QUOTE 3-ARY-OPERATOR)) (LIST (QUOTE 2-ARY-OPERATOR) (QUOTE 2-ARY-OPERATOR)) (LIST (QUOTE 1-ARY-OPERATOR) (QUOTE 1-ARY-OPERATOR)) (LIST (QUOTE 3-ARY-OPERATOR) (QUOTE 3-ARY-OPERATOR)) (LIST (QUOTE 2-ARY-OPERATOR) (QUOTE 2-ARY-OPERATOR)) (LIST (QUOTE 1-ARY-OPERATOR) (QUOTE 1-ARY-OPERATOR))) (TOKENS G48538) (LIST (LIST (QUOTE X) (INTERNKEY "VAR")) (LIST (QUOTE ABS) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE SIN) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE COS) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE TAN) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE SQR) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE EXP) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE LOG) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE REAL-SQRT) (INTERNKEY "1-ARY-OPERATOR")) (LIST (QUOTE +) (INTERNKEY "2-ARY-OPERATOR")) (LIST (QUOTE -) (INTERNKEY "2-ARY-OPERATOR")) (LIST (QUOTE *) (INTERNKEY "2-ARY-OPERATOR")) (LIST (QUOTE /) (INTERNKEY "2-ARY-OPERATOR")) (LIST (QUOTE /-) (INTERNKEY "2-ARY-OPERATOR")) (LIST (QUOTE REAL-EXPT) (INTERNKEY "2-ARY-OPERATOR")) (LIST (QUOTE REAL-IF) (INTERNKEY "3-ARY-OPERATOR")) (LIST (INTERNKEY "OPEN") (INTERNKEY "OPEN")) (LIST (INTERNKEY "CLOSE") (INTERNKEY "CLOSE"))) (MINIMUM-PRODUCTION-SIZES G48538) (LET ((G48539 (MAKE-HASH-TABLE))) (SET-HASH G48539 (QUOTE COS) 1 (QUOTE START) 1 (QUOTE 3-ARY-OPERATOR) 1000000 (QUOTE +) 1 (QUOTE EXPRESION) 1 (QUOTE 2-ARY-OPERATOR) 1 (QUOTE *) 1 (QUOTE /-) 1 (QUOTE VAR) 1 (QUOTE 1-ARY-OPERATOR) 1 (QUOTE CONSTANT) 1 (QUOTE ABS) 1 (QUOTE SQR) 1 (QUOTE SIN) 1 (QUOTE -) 1) G48539) (LEXER G48538) (QUOTE LISP-MATH-EXPRESSION-LEXER) (PARSER-INITIALIZER G48538) (QUOTE INITIALIZE-LISP-MATH-EXPRESSION-PARSER) (CROSSOVER-NODES G48538) (LIST (INTERNKEY "1-ARY-OPERATOR") (INTERNKEY "2-ARY-OPERATOR") (INTERNKEY "3-ARY-OPERATOR") (INTERNKEY "EXPRESION")) (SKIP-INITIALIZATION G48538) T) G48538) (SPECIALIZED-TOKENS G48524) NIL) G48524) (ALGORITHM G48520) G48517 (TASK-BUILDER G48520) (PROGN (SETF (PROPERTIES-VALUES G48540) (MAKE-HASH-TABLE) (NAME G48540) "N runs task builder" (RUNS G48540) 1) G48540) (TASK-PLANIFIER G48520) (PROGN (SETF (PROPERTIES-VALUES G48541) (MAKE-HASH-TABLE) (NAME G48541) (QUOTE GLOBAL-RUNNING-IMAGE-PLANIFIER) (CONNECTION-ADMINISTRATOR G48541) (SYSTEM-GET (QUOTE MAIN-CONNECTION-ADMINISTRATOR)) (MAX-SIMULTANEOUS-PROCESSES G48541) 1) G48541)) G48520) (POPULATION G48517) NIL (POPULATION-SIZE G48517) 100 (SELECTION-METHOD G48517) (PROGN (SETF (PROPERTIES-VALUES G48542) (LET ((G48543 (MAKE-HASH-TABLE))) (SET-HASH G48543 (QUOTE FILTER-FUNCTION) NIL) G48543) (NAME G48542) (QUOTE TOURNAMENT-SELECTION-METHOD)) G48542) (INITIALIZATION-METHOD G48517) (PROGN (SETF (PROPERTIES-VALUES G48544) (MAKE-HASH-TABLE) (NAME G48544) (QUOTE RANDOM-TREES-INITIALIZER) (MIN-SIZE G48544) 1 (MAX-SIZE G48544) 5 (MIN-DEPTH G48544) 1 (MAX-DEPTH G48544) 5) G48544) (REGISTRY G48517) (LET ((G48545 (MAKE-HASH-TABLE))) (SET-HASH G48545 0 T 0.0 T 1 T 2 T (LIST (QUOTE /-) (LIST (QUOTE +) (LIST (QUOTE ABS) (QUOTE X)) 0.5403023) 12) T 3 T 4 T 5 T 6 T (LIST (QUOTE *) (LIST (QUOTE /-) -3 (LIST (QUOTE /-) (QUOTE X) (QUOTE X))) 9) T (LIST (QUOTE SQR) (LIST (QUOTE COS) (QUOTE X))) T (LIST (QUOTE -) (LIST (QUOTE -) (LIST (QUOTE -) (QUOTE X) 0) 0.84147096) (LIST (QUOTE +) (QUOTE X) (QUOTE X))) T 8 T (LIST (QUOTE /-) (LIST (QUOTE *) (LIST (QUOTE *) (QUOTE X) 0) (LIST (QUOTE *) 0.54869617 (LIST (QUOTE COS) (QUOTE X)))) (LIST (QUOTE +) (QUOTE X) (QUOTE X))) T (LIST (QUOTE -) (LIST (QUOTE /-) (LIST (QUOTE /-) (LIST (QUOTE *) (QUOTE X) (QUOTE X)) (QUOTE X)) (QUOTE X)) (LIST (QUOTE +) (QUOTE X) 0.75390226)) T 9 T 10 T (LIST (QUOTE SIN) (QUOTE X)) T (LIST (QUOTE /-) (LIST (QUOTE ABS) (LIST (QUOTE -) 7 (QUOTE X))) 3) T (LIST (QUOTE SIN) (LIST (QUOTE -) -0.9589243 (LIST (QUOTE SIN) (QUOTE X)))) T (LIST (QUOTE SIN) (LIST (QUOTE ABS) (QUOTE X))) T (LIST (QUOTE SQR) (LIST (QUOTE COS) (LIST (QUOTE COS) (QUOTE X)))) T 0.96017027 T 0.21169186 T (LIST (QUOTE SQR) (LIST (QUOTE +) (LIST (QUOTE SQR) (QUOTE X)) 0)) T 28 T (LIST (QUOTE COS) (LIST (QUOTE ABS) (LIST (QUOTE +) (QUOTE X) 1))) T (LIST (QUOTE /-) (LIST (QUOTE SQR) (LIST (QUOTE +) (QUOTE X) 0)) (LIST (QUOTE SQR) (LIST (QUOTE +) (QUOTE X) 8))) T (LIST (QUOTE SQR) (LIST (QUOTE ABS) (LIST (QUOTE +) (QUOTE X) 6))) T (LIST (QUOTE ABS) (LIST (QUOTE +) (LIST (QUOTE /-) 4 (QUOTE X)) (LIST (QUOTE +) 0 (QUOTE X)))) T (LIST (QUOTE SIN) (LIST (QUOTE +) 81 (LIST (QUOTE /-) 10 (QUOTE X)))) T (LIST (QUOTE /-) (QUOTE X) 6) T -0.41614684 T (LIST (QUOTE COS) (LIST (QUOTE -) -0.9589243 (LIST (QUOTE COS) (QUOTE X)))) T -0.09067019 T (LIST (QUOTE +) 10 (LIST (QUOTE /-) (QUOTE X) 6)) T (LIST (QUOTE +) (LIST (QUOTE /-) (LIST (QUOTE /-) 6 (QUOTE X)) (LIST (QUOTE /-) 2 (QUOTE X))) (QUOTE X)) T (LIST (QUOTE *) (LIST (QUOTE ABS) (LIST (QUOTE +) (QUOTE X) 1)) 0.84147096) T -0.12796369 T (LIST (QUOTE *) (LIST (QUOTE ABS) (LIST (QUOTE ABS) (QUOTE X))) 0.09455407) T (LIST (QUOTE /-) (LIST (QUOTE /-) 64 (LIST (QUOTE /-) 2 (QUOTE X))) (LIST (QUOTE -) 4 (QUOTE X))) T (LIST (QUOTE COS) (LIST (QUOTE /-) -0.9589243 (LIST (QUOTE COS) (QUOTE X)))) T (LIST (QUOTE *) (LIST (QUOTE *) (LIST (QUOTE COS) (QUOTE X)) (LIST (QUOTE COS) (QUOTE X))) (LIST (QUOTE -) (QUOTE X) (QUOTE X))) T (LIST (QUOTE ABS) (LIST (QUOTE +) (LIST (QUOTE COS) (QUOTE X)) (LIST (QUOTE SQR) (QUOTE X)))) T (LIST (QUOTE +) (LIST (QUOTE +) (LIST (QUOTE COS) (QUOTE X)) (LIST (QUOTE -) (QUOTE X) 6)) (LIST (QUOTE COS) (QUOTE X))) T (LIST (QUOTE SIN) (LIST (QUOTE +) 81 (LIST (QUOTE /-) 0.85755325 (QUOTE X)))) T (LIST (QUOTE -) (QUOTE X) (QUOTE X)) T (LIST (QUOTE /-) (LIST (QUOTE +) (LIST (QUOTE ABS) (QUOTE X)) 10) 12) T (LIST (QUOTE SQR) (LIST (QUOTE COS) (LIST (QUOTE SQR) (LIST (QUOTE +) 0.4316314 (LIST (QUOTE -) (QUOTE X) (LIST (QUOTE /-) (LIST (QUOTE COS) (LIST (QUOTE *) (QUOTE X) (QUOTE X))) 6)))))) T 75 T (LIST (QUOTE SQR) (LIST (QUOTE +) 0.5403023 (LIST (QUOTE /-) (QUOTE X) (QUOTE X)))) T (LIST (QUOTE +) (LIST (QUOTE SIN) (QUOTE X)) (QUOTE X)) T (LIST (QUOTE COS) (LIST (QUOTE /-) (LIST (QUOTE ABS) (QUOTE X)) 5)) T (LIST (QUOTE -) (QUOTE X) 6) T 0.06815714 T (LIST (QUOTE -) (LIST (QUOTE ABS) (LIST (QUOTE SQR) (QUOTE X))) 0.09455407) T (LIST (QUOTE SQR) (LIST (QUOTE *) (LIST (QUOTE -) (QUOTE X) (QUOTE X)) (LIST (QUOTE SIN) (QUOTE X)))) T 0.7330342 T (LIST (QUOTE COS) (LIST (QUOTE COS) (LIST (QUOTE ABS) (QUOTE X)))) T (LIST (QUOTE SIN) (LIST (QUOTE ABS) (LIST (QUOTE +) (QUOTE X) 6))) T (LIST (QUOTE SQR) (LIST (QUOTE *) (LIST (QUOTE -) (QUOTE X) (QUOTE X)) (QUOTE X))) T (LIST (QUOTE SIN) (LIST (QUOTE /-) (LIST (QUOTE -) (QUOTE X) 1) -0.14550004)) T (LIST (QUOTE SQR) (LIST (QUOTE SIN) (LIST (QUOTE -) 0 (QUOTE X)))) T (LIST (QUOTE ABS) (LIST (QUOTE ABS) (LIST (QUOTE +) (QUOTE X) 1))) T (LIST (QUOTE COS) (QUOTE X)) T -0.96621824 T (LIST (QUOTE SIN) (LIST (QUOTE SIN) (LIST (QUOTE +) 6 (QUOTE X)))) T (LIST (QUOTE /-) (LIST (QUOTE *) (LIST (QUOTE +) 3 (QUOTE X)) (LIST (QUOTE /-) 0 (QUOTE X))) (QUOTE X)) T (LIST (QUOTE SIN) (LIST (QUOTE ABS) (LIST (QUOTE ABS) (QUOTE X)))) T (LIST (QUOTE /-) (LIST (QUOTE /-) (LIST (QUOTE ABS) (QUOTE X)) 5) (LIST (QUOTE ABS) (LIST (QUOTE +) (QUOTE X) (QUOTE X)))) T (LIST (QUOTE /-) (LIST (QUOTE ABS) (LIST (QUOTE SIN) (QUOTE X))) 3) T (LIST (QUOTE COS) (LIST (QUOTE +) -0.9589243 (LIST (QUOTE COS) (QUOTE X)))) T -0.9576595 T (LIST (QUOTE SIN) (LIST (QUOTE SQR) (LIST (QUOTE SIN) (QUOTE X)))) T (LIST (QUOTE ABS) (LIST (QUOTE +) (LIST (QUOTE /-) 4 (QUOTE X)) (LIST (QUOTE +) (QUOTE X) (QUOTE X)))) T (LIST (QUOTE SQR) (LIST (QUOTE ABS) (QUOTE X))) T (LIST (QUOTE SIN) (LIST (QUOTE +) 81 (QUOTE X))) T (LIST (QUOTE /-) (QUOTE X) 3) T (LIST (QUOTE *) (LIST (QUOTE ABS) (LIST (QUOTE SQR) (QUOTE X))) 0.09455407) T (QUOTE X) T (LIST (QUOTE /-) (LIST (QUOTE SQR) (LIST (QUOTE +) (QUOTE X) 0)) (LIST (QUOTE SQR) (LIST (QUOTE /-) (QUOTE X) 6))) T (LIST (QUOTE -) 10 (LIST (QUOTE /-) (QUOTE X) 6)) T (LIST (QUOTE SIN) (LIST (QUOTE SQR) (LIST (QUOTE ABS) (QUOTE X)))) T (LIST (QUOTE -) (LIST (QUOTE /-) 2 (LIST (QUOTE +) 5 (QUOTE X))) (LIST (QUOTE +) (QUOTE X) 0.75390226)) T (LIST (QUOTE *) (LIST (QUOTE COS) (LIST (QUOTE +) (QUOTE X) (QUOTE X))) 0.0) T (LIST (QUOTE COS) (LIST (QUOTE SQR) (LIST (QUOTE ABS) (QUOTE X)))) T -0.5440211 T (LIST (QUOTE *) (LIST (QUOTE SQR) (LIST (QUOTE SIN) (QUOTE X))) 6) T (LIST (QUOTE ABS) (LIST (QUOTE +) 10 (LIST (QUOTE /-) (QUOTE X) 6))) T (LIST (QUOTE SIN) (LIST (QUOTE SQR) (LIST (QUOTE +) 2 (QUOTE X)))) T 0.9092974 T (LIST (QUOTE -) (LIST (QUOTE ABS) (LIST (QUOTE SQR) (LIST (QUOTE /-) (QUOTE X) 6))) 0.09455407) T 0.295959 T -3.1455002 T (LIST (QUOTE SQR) (QUOTE X)) T (LIST (QUOTE -) (LIST (QUOTE SIN) (QUOTE X)) (QUOTE X)) T (LIST (QUOTE -) (LIST (QUOTE ABS) (LIST (QUOTE SQR) (QUOTE X))) 7) T (LIST (QUOTE -) (LIST (QUOTE /-) (LIST (QUOTE -) 7 (QUOTE X)) (LIST (QUOTE ABS) (QUOTE X))) (LIST (QUOTE ABS) (QUOTE X))) T 0.4121185 T) G48545) (MAX-UNIQUE-ITERATIONS G48517) 10 (local-optimization G48517) (PROGN (SETF (PROPERTIES-VALUES G48546) (MAKE-HASH-TABLE) (NAME G48546) (QUOTE DEFAULT-GENERATIONAL-OPTIMIZATION-STRATEGY) (SUBJECT G48546) G48517 (OPTIMIZATION-TARGET G48546) (PROGN (SETF (PROPERTIES-VALUES G48547) (MAKE-HASH-TABLE) (NAME G48547) (QUOTE OPTIMIZATION-TARGET-BEST-1) (SIZE G48547) 1) G48547) (OPTIMIZATION-METHOD G48546) (PROGN (SETF (PROPERTIES-VALUES G48548) (MAKE-HASH-TABLE) (NAME G48548) (QUOTE OPTIMIZATION-METHOD-STEEPEST-DESCENT) (VALUE-FUNCTION G48548) (QUOTE OPTIMIZE-CONSTANTS-STEEPEST-DESCENT-1) (MAX-ITERATIONS G48548) 200 (PRECISION G48548) 1.0E-5 (DELTA-GRADIENT G48548) 0.01) G48548) (MAX-GENERATIONS G48546) NIL) G48546) (ELITE-MANAGER G48517) (PROGN (SETF (PROPERTIES-VALUES G48549) (MAKE-HASH-TABLE) (NAME G48549) "Elite manager" (MAX-SIZE G48549) 1 (VALUE-FUNCTION G48549) (QUOTE LAMBDA-DEFAULT-FITNESS-COMPARER) (ELITES G48549) (LIST (PROGN (SETF (GEN G48550) (PROGN (SETF (EXPRESION G48551) (LIST (QUOTE ABS) (LIST (QUOTE ABS) (LIST (QUOTE +) (QUOTE X) 1))) (FITNESS G48551) 0) G48551) (FITNESS G48550) 0 (FITNESS-ADJUSTED G48550) 0.09090909 (FITNESS-NORMALIZED G48550) 0.6187754) G48550))) G48549) (MAX-GENERATIONS G48517) 2 (GENERATION G48517) 2) G48517)))

(defmethod opencl-test-evaluator ((o test-entity-evaluator-x-cl))
  "Evaluator for <o> test cases.
   #NOTE: global and localwork sizes should be propper to test significant cases which affect."
  (make-instance 'entity-function-x-cl-evaluator 
                 :samples 8 
                 :fitness-function 'evaluate-distance 
                 :target-program '(+ x 1) 
                 :global-work-size 8))

(defmethod lisp-environment-test-evaluator ((o test-entity-evaluator-x-cl))
  "Evaluator for <o> test cases.
   #NOTE: global and localwork sizes should be propper to test significant cases which affect."
  (make-instance 'entity-function-x-evaluator 
                 :samples 8 
                 :fitness-function 'evaluate-distance 
                 :target-program '(+ x 1) 
                 :global-work-size 8))

;; Testing opencl expressions builder mechanism
(defmethod test-evaluate-population ((o test-entity-evaluator-x-cl))
  "Test population evaluation."
  (let* ((algorithm (opencl-test-algorithm o))
         (population (generate-population (initialization-method algorithm) algorithm))
         (evaluator (opencl-test-evaluator o)))
    (setf (program-source-part-population o) (string-from-file (merge-pathnames "OpenCL\\fitness-base-part-population-x-test.cl" *base-pathname*)))
    (initialize-fitness-data evaluator)
    (evaluate evaluator population)
    (check (<= (abs (- (fitness (nth 0 (individuals population))) 10)) 0.01))
    (check (<= (abs (- (fitness (nth 1 (individuals population))) 10)) 0.01))
    (check (<= (abs (- (fitness (nth 2 (individuals population))) 10)) 0.01))
    (check (<= (abs (- (fitness (nth 3 (individuals population))) 10)) 0.01))
    (check (<= (abs (- (fitness (nth 4 (individuals population))) 10)) 0.01))
    (check (<= (abs (- (fitness (nth 5 (individuals population))) 10)) 0.01))
    (check (<= (abs (- (fitness (nth 6 (individuals population))) 10)) 0.01))
    (check (<= (abs (- (fitness (nth 7 (individuals population))) 10)) 0.01))
    (check (<= (abs (- (fitness (nth 8 (individuals population))) 10)) 0.01))
    (check (<= (abs (- (fitness (nth 9 (individuals population))) 10)) 0.01))))

(defmethod test-evaluate-individual ((o test-entity-evaluator-x-cl))
  "Test just one individual evaluation."
  (let* ((algorithm (opencl-test-algorithm o))
         (population (generate-population (initialization-method algorithm) algorithm))
         (evaluator (opencl-test-evaluator o)))
    (setf (program-source-part o) (string-from-file (merge-pathnames "OpenCL\\fitness-base-part-x-test.cl" *base-pathname*)))
    (initialize-fitness-data evaluator)
    (evaluate evaluator population)
    (check (<= (abs (- (fitness (nth (individuals population))) 10)) 0.01))))

;; Check both methods working ok
(defmethod test-evaluate-distance ((o test-entity-evaluator-x-cl))
  "Test distance evaluation with one individual."
  (let* ((algorithm (opencl-test-algorithm o))
         (population-a (create-test-population algorithm '(+ x 1) 10))
         (population-b (create-test-population algorithm '(+ x 1) 10))
         (evaluator-opencl (opencl-test-evaluator o))
         (evaluator-lisp (lisp-environment-test-evaluator o)))
    (setf (fitness-function evaluator) 'evaluate-distance)
    (initialize-fitness-data evaluator-opencl)
    (initialize-fitness-data evaluator-lisp)
    (evaluate evaluator-opencl population-a)
    (evaluate evaluator-lisp population-b)
    (dotimes (i (size population-a))
      (check (<= (abs (- (fitness (nth (individuals population-a) i))
                         (fitness (nth (individuals population-b) i)))) 
                 0.01)))))

(defmethod test-evaluate-squared-distance ((o test-entity-evaluator-x-cl))
  "Test squared distance evaluation with one individual."
  (let* ((algorithm (opencl-test-algorithm o))
         (population-a (create-test-population algorithm '(+ x 1) 10))
         (population-b (create-test-population algorithm '(+ x 1) 10))
         (evaluator-opencl (opencl-test-evaluator o))
         (evaluator-lisp (lisp-environment-test-evaluator o)))
    (setf (fitness-function evaluator) 'evaluate-squared-distance)
    (initialize-fitness-data evaluator-opencl)
    (initialize-fitness-data evaluator-lisp)
    (evaluate evaluator-opencl population-a)
    (evaluate evaluator-lisp population-b)
    (dotimes (i (size population-a))
      (check (<= (abs (- (fitness (nth (individuals population-a) i))
                         (fitness (nth (individuals population-b) i)))) 
                 0.01)))))

;; Random individuals and see diferences between lisp environment and opencl evaluator
;; #TODO: Add case for individual evaluation
(defmethod test-evaluate-distance ((o test-entity-evaluator-x-cl))
  "Test distance evaluation with one individual."
  (let* ((algorithm (opencl-test-algorithm o))
         (population-a (generate-population (initialization-method algorithm) algorithm))
         (population-b (copy population-a))
         (evaluator-opencl (opencl-test-evaluator o))
         (evaluator-lisp (lisp-environment-test-evaluator o)))
    (setf (fitness-function evaluator) 'evaluate-distance)
    (initialize-fitness-data evaluator-opencl)
    (initialize-fitness-data evaluator-lisp)
    (evaluate evaluator-opencl population-a)
    (evaluate evaluator-lisp population-b)
    (dotimes (i (size poulation-a))
      (check (<= (abs (- (fitness (nth (individuals population-a) i))
                         (fitness (nth (individuals population-b) i)))) 
                 0.01)))))

;; Test specific cases
;; #TODO: Add case for individual evaluation
(defmethod test-long-expression ((o test-entity-evaluator-x-cl))
  (let* ((algorithm (opencl-test-algorithm o))
         (population (create-test-population algorithm (default-long-expression o) 10))
         (evaluator (opencl-test-evaluator o)))
    (initialize-fitness-data evaluator)
    (evaluate evaluator population)
    (dotimes (i (size population))
      (check (<= (abs (- (fitness (nth (individuals population-a) i)) 10.0))
                 0.01)))))

(defmethod default-long-expression ((o test-entity-evaluator-x-cl))
  '(- 
    ;; Trash
    (+ (* (- (sin (+ x x)) (cos (+ (sin (* x 3)) (sin (* x 3))))) (- (cos (+ (sin (* x 3.3)) x)) (sin (+ (sin (* x 89)) x))))
       (* (- (sin (+ 3.5 x)) (sqr (+ (sin (* x 3)) (sin (* x 3))))) (- (cos (+ (sin (* x 3.2)) x)) (sin (+ (sin (* x 3.333)) x))))
       (* (- (sqr (+ 1 x)) (cos (+ (sin (* x 3)) (sin (* x 3))))) (- (cos (+ (sin (* x 3)) x)) (sin (+ (sin (* x 3)) x))))
       (* (- (sin (* 2.2 x)) (cos (- x (sin (* x 3))))) (- (cos (- (sin (* x 3)) x)) (sin (+ (sin (* x 3)) x))))
       (* (- (sin (* x x)) (sin (+ (sin (* x 0.5)) (sin (* x 3))))) (- (cos (* (sin (* x 1.5)) x)) (sin (+ (sin (* 23 3)) x)))))
    ;; Canceling trash
    (+ (* (- (sin (+ x x)) (cos (+ (sin (* x 3)) (sin (* x 3))))) (- (cos (+ (sin (* x 3.3)) x)) (sin (+ (sin (* x 89)) x))))
       (* (- (sin (+ 3.5 x)) (sqr (+ (sin (* x 3)) (sin (* x 3))))) (- (cos (+ (sin (* x 3.2)) x)) (sin (+ (sin (* x 3.333)) x))))
       (* (- (sqr (+ 1 x)) (cos (+ (sin (* x 3)) (sin (* x 3))))) (- (cos (+ (sin (* x 3)) x)) (sin (+ (sin (* x 3)) x))))
       (* (- (sin (* 2.2 x)) (cos (- x (sin (* x 3))))) (- (cos (- (sin (* x 3)) x)) (sin (+ (sin (* x 3)) x))))
       (* (- (sin (* x x)) (sin (+ (sin (* x 0.5)) (sin (* x 3))))) (- (cos (* (sin (* x 1.5)) x)) (sin (+ (sin (* 23 3)) x)))))
    ;; Desired behaviour
    (+ x 1)))

(defmethod create-test-population ((algorithm search-algorithm) expression size)
  "Generate population for search on <algorithm>."
  (setf (population-size algorithm) size)
  (let ((population (make-array size)))
    (dotimes (i size)
      (let ((object (make-instance (objective-class algorithm) :expresion expression)))
        (evaluate algorithm object)
        (setf (aref population i) object)))
    (make-instance 'population :individuals-array population)))
