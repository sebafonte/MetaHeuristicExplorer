
(defun mutate-koza (program language operator)
  "Answer a new program with john koza example mutation operator."
  (declare (ignore operator))
  (let ((point (random-integer 0 (tree-size program)))
        (new-subtree (create-expresion language (max-size language) (max-depth language) t nil))
        (new-program (list (copy-tree program))))
    (multiple-value-bind (subtree-pointer fragment) (get-subtree-local (first new-program) new-program point)
      (declare (ignore fragment))       
      (setf (first subtree-pointer) new-subtree))
    (values (first new-program))))

(defun crossover-koza (parent-a parent-b language operator)
  "Answer a new program with john koza example crossover operator."
  (let ((point-a (random-integer 0 (tree-size parent-a)))
        (point-b (random-integer 0 (tree-size parent-b)))
        (child-a (list (copy-tree parent-a))) 
        (child-b (list (copy-tree parent-b))))
    (multiple-value-bind (a-subtree-pointer a-fragment) 
        (get-subtree-local (first child-a) child-a point-a)
      (multiple-value-bind (b-subtree-pointer b-fragment) 
          (get-subtree-local (first child-b) child-b point-b)
        (setf (first a-subtree-pointer) b-fragment)
        (setf (first b-subtree-pointer) a-fragment)))
    (validate-crossover-moves operator parent-a child-a parent-b child-b (max-depth language) (max-size language))))

(defun get-subtree-local (tree pointer-to-tree index)
  (if (= index 0)
      (values pointer-to-tree (copy-tree tree) 0)              
    (if (consp tree)
        (do* ((tail (rest tree) (rest tail)) 
              (argument (first tail) (first tail)))            
             ((not tail) (values nil nil index))               
          (multiple-value-bind (new-pointer new-tree new-index)
              (get-subtree-local argument tail (- index 1))          
            (if (= new-index 0)                                
                (return (values new-pointer new-tree 0))       
              (setf index new-index))))                        
      (values nil nil index))))

(defun get-function-subtree (tree pointer-to-tree index)
  (if (= index 0)
      (values pointer-to-tree (copy-tree tree) 0)
    (if (consp tree)
        (do* ((tail (rest tree) (rest tail)) (argument (first tail) (first tail)))
             ((not tail) (values nil nil index))
          (multiple-value-bind (new-pointer new-tree new-index)
              (if (consp argument) 
                  (get-function-subtree argument tail (- index 1)) 
                (values nil nil index))
            (if (= new-index 0) 
                (return (values new-pointer new-tree 0)) 
              (setf index new-index))))
      (values nil nil index))))
