(defun minimum-production-size-1 (grammar all-productions production)
  (if (keywordp production)
      (if (structural-symbol production) 0 1)
    (minimum-non-terminal-size grammar all-productions production)))

(defun minimum-non-terminal-size (grammar all-productions production)
  (let ((p (mapcar 
            (lambda (value) (car value))
            (productions-for grammar all-productions production)))
        (minimum-size *infinite-productions-size-value*))
    (dolist (i p)
      (let ((local-size 0))
        (dolist (j (cdr i))
          (incf local-size (minimum-production-size grammar (remove i all-productions) j)))
        (if (or (null minimum-size)
                (< local-size minimum-size))
            (setf minimum-size local-size))))
    minimum-size))


(defun minimum-production-size-2 (grammar all-productions production)
  (if (keywordp production)
      (if (structural-symbol production) 0 1)
    (minimum-non-terminal-size-2 grammar all-productions production)))
#|
(defun minimum-production-size (grammar all-productions production)
  (if (symbolp production)
      (if (keywordp production)
          (if (structural-symbol production) 0 1))
    (let ((p (mapcar 
              (lambda (value) (car value))
              (productions-for grammar all-productions production)))
          (minimum-size *infinite-productions-size-value*))
      (dolist (i p)
        (let ((local-size 0))
          (dolist (j (cdr i))
            (incf local-size (minimum-production-size grammar (remove i all-productions) j)))
          (if (or (null minimum-size)
                  (< local-size minimum-size))
              (setf minimum-size local-size))))
      minimum-size)))
|#

(defun minimum-production-size (grammar all-productions production)
  (if (and (symbolp production) (keywordp production))
      (if (structural-symbol production) 0 1)  
    (let ((p (mapcar 
              (lambda (value) (car value))
              (non-recursive-productions-for grammar all-productions production)))
          (minimum-size *infinite-productions-size-value*))
      (dolist (i p)
        (let ((local-size 0))
          (dolist (j (cdr i))
            (incf local-size (minimum-production-size-1 grammar j j)))
          (if (or (null minimum-size)
                  (< local-size minimum-size))
              (setf minimum-size local-size))))
      minimum-size)))
